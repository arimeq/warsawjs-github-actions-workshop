# name of the workflow
name: CI

# event trigger
on:
  pull_request:
    branches:
      - main

concurrency:
  group: ci-tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-cache:
    permissions:
      id-token: write # This is required to allow the GitHub Action to authenticate with Deno Deploy.
      contents: read
    # define type of machine your action will run on
    runs-on: ubuntu-latest
    # tell the machine what to do – steps
    steps:
      # give the step a name
      - name: Checkout
        # action to use for this step
        uses: actions/checkout@v2
        # parameters used for the action based on the documentation
        with:
          fetch-depth: 0

      - name: Setup Nodejs
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'yarn'

      - name: Cache node modules and artifacts
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            /home/runner/.cache/Cypress
            **/node_modules
          key: yarn-cache-${{ hashFiles('**/yarn.lock') }}

      - name: Install
        if: steps.yarn-cache.outputs.cache-hit != true
        run: yarn install

      - name: Build Site
        run: yarn build --prod

      - name: Upload to Deno Deploy
        uses: denoland/deployctl@v1
        with:
          project: "warsawjs-workshop-2"
          entrypoint: https://deno.land/std/http/file_server.ts
          root: dist/apps/unicorn-hunt

  # name of the job
  test:
    needs: build-and-cache
    # define type of machine your action will run on
    runs-on: ubuntu-latest
    # tell the machine what to do – steps
    steps:
      # give the step a name
      - name: Checkout
        # action to use for this step
        uses: actions/checkout@v2
        # parameters used for the action based on the documentation
        with:
          fetch-depth: 0

      - name: Setup Nodejs
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'yarn'

      - name: Cache node modules and artifacts
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            /home/runner/.cache/Cypress
            **/node_modules
          key: yarn-cache-${{ hashFiles('**/yarn.lock') }}

      - name: Install
        if: steps.yarn-cache.outputs.cache-hit != true
        run: yarn install

      - name: Run tests
        run: yarn test:ci

  lint:
    needs: build-and-cache
    # define type of machine your action will run on
    runs-on: ubuntu-latest
    # tell the machine what to do – steps
    steps:
      # give the step a name
      - name: Checkout
        # action to use for this step
        uses: actions/checkout@v2
        # parameters used for the action based on the documentation
        with:
          fetch-depth: 0

      - name: Setup Nodejs
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'yarn'

      - name: Cache node modules and artifacts
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            /home/runner/.cache/Cypress
            **/node_modules
          key: yarn-cache-${{ hashFiles('**/yarn.lock') }}

      - name: Install
        if: steps.yarn-cache.outputs.cache-hit != true
        run: yarn install

      - name: Lint CI
        run: yarn lint:ci

  e2e:
    needs: build-and-cache
    # define type of machine your action will run on
    runs-on: ubuntu-latest
    # tell the machine what to do – steps
    steps:
      # give the step a name
      - name: Checkout
        # action to use for this step
        uses: actions/checkout@v2
        # parameters used for the action based on the documentation
        with:
          fetch-depth: 0

      - name: Setup Nodejs
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'yarn'

      - name: Cache node modules and artifacts
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            /home/runner/.cache/Cypress
            **/node_modules
          key: yarn-cache-${{ hashFiles('**/yarn.lock') }}

      - name: Install
        if: steps.yarn-cache.outputs.cache-hit != true
        run: yarn install

      - name: Run e2e tests
        run: yarn e2e

